AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template to build CI/CD pipeline for fargate-node-example

## Parameters

Parameters:
  Stage:
    Type: String
    Default: dev
  ContainerPort:
    Type: Number
    Default: 8080
  GithubBranch:
    Type: String
    Default: main
  GithubRepo:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: 'GithubRepo'
  GithubUserName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: 'GithubUserName'
  GithubOAuthToken:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: 'GithubOAuthToken'

Resources:

## Resources
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'ecr-repository']]

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts: 
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "ECRRepository" ] ] ] ]
      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'BuildProject']]
      ServiceRole: !Ref CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml

  CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
        Type: S3
      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'CodePipeLine']]
      RestartExecutionOnUpdate: False
      RoleArn:
        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]

      Stages:
        - Name: Source
          Actions: 
          - Name: Source
            ActionTypeId: 
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: 1
            Configuration:
              Repo: !Ref GithubRepo
              Branch: !Ref GithubBranch
              Owner: !Ref GithubUserName
              OAuthToken: !Ref GithubOAuthToken
            RunOrder: 1
            OutputArtifacts:
              - Name: source-output-artifacts
        
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts:
              - Name: build-output-artifacts
            InputArtifacts:
              - Name: source-output-artifacts
            Configuration:
                ProjectName: !Ref BuildProject
            RunOrder: 1

        - Name: Deploy
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: source-output-artifacts
              - Name: build-output-artifacts
            Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${ContainerPort}"
                  }
                RoleArn: 
                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'FargateECSCluster']]
                TemplatePath: source-output-artifacts::CloudFormation/cluster.yml
            RunOrder: 1


## Roles
  CodePipeLineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  CodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CloudformationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

